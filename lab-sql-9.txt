# Lab | SQL Queries 9
## Instructions
### In this lab we will find the customers who were active in consecutive months of May and June. Follow the steps to complete the analysis.
-- 1. Create a table rentals_may to store the data from rental table with information for the month of May.
-- 2. Insert values in the table rentals_may using the table rental, filtering values only for the month of May.
-- 3. Create a table rentals_june to store the data from rental table with information for the month of June.
-- 4. Insert values in the table rentals_june using the table rental, filtering values only for the month of June.
-- 5. Check the number of rentals for each customer for May.
-- 6. Check the number of rentals for each customer for June.
-- 7. Create a Python connection with SQL database and retrieve the results of the last two queries (also mentioned below) as dataframes:
	-- 7.1 Check the number of rentals for each customer for May
	-- 7.2 Check the number of rentals for each customer for June
	#### Hint: You can store the results from the two queries in two separate dataframes.
-- 8. Write a function that checks if customer borrowed more or less films in the month of June as compared to May.
	#### Hint: For this part, you can create a join between the two dataframes created before, using the merge function available for pandas dataframes. Here is a link to the documentation for the merge function.
    
-- 1. Create a table rentals_may to store the data from rental table with information for the month of May.

create table if not exists rentals_may
select * from rental
where date_format(convert(rental_date, date), "%m") = "05";

select * from rentals_may;

-- 2. Insert values in the table rentals_may using the table rental, filtering values only for the month of May.

truncate table rentals_may;

insert into rentals_may
select * from rental
where date_format(convert(rental_date, date), "%m") = "05";


-- 3. Create a table rentals_june to store the data from rental table with information for the month of June.
-- 4. Insert values in the table rentals_june using the table rental, filtering values only for the month of June.

create table if not exists rentals_june
select * from rental
where date_format(convert(rental_date, date), "%m") = "06";


-- 5. Check the number of rentals for each customer for May.

select customer_id, count(*) rental_customer from rentals_may
group by customer_id;

-- 6. Check the number of rentals for each customer for June.

select customer_id, count(*) rental_customer from rentals_june
group by customer_id;

-- 7. Create a Python connection with SQL database and retrieve the results of the last two queries (also mentioned below) as dataframes:
	-- 7.1 Check the number of rentals for each customer for May

-- Even if the code is about the bank SQL database. It is the same. 

#SQL Connectors

import pymysql
from sqlalchemy import create_engine
from getpass import getpass
from sqlalchemy import inspect

import mysql.connector 

from mysql.connector import connect


username='root'
password='password'
server='localhost'
database='bank'
password=getpass()
engine = create_engine(f'mysql+pymysql://{username}:{password}@{server}/{database}')

db = connect(
    host='localhost',
    user='root',
    passwd = getpass('Enter password: '),
    database='bank')

inspector = inspect(engine)
inspector.get_table_names()

['account', 'card', 'client', 'disp', 'district', 'loan', 'order', 'trans']

query = "select card_id, issued from card where type ='gold'"
df = pd.read_sql_query(query,db)


	-- 7.2 Check the number of rentals for each customer for June
	#### Hint: You can store the results from the two queries in two separate dataframes. 
-- 8. Write a function that checks if customer borrowed more or less films in the month of June as compared to May.
	#### Hint: For this part, you can create a join between the two dataframes created before, using the merge function available for pandas dataframes. Here is a link to the documentation for the merge function.
    